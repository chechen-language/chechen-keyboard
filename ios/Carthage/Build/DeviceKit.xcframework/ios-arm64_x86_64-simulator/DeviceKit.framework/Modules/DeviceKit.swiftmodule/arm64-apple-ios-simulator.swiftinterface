// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=unchecked -O -module-name DeviceKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public enum Device {
  case iPodTouch5
  case iPodTouch6
  case iPodTouch7
  case iPhone4
  case iPhone4s
  case iPhone5
  case iPhone5c
  case iPhone5s
  case iPhone6
  case iPhone6Plus
  case iPhone6s
  case iPhone6sPlus
  case iPhone7
  case iPhone7Plus
  case iPhoneSE
  case iPhone8
  case iPhone8Plus
  case iPhoneX
  case iPhoneXS
  case iPhoneXSMax
  case iPhoneXR
  case iPhone11
  case iPhone11Pro
  case iPhone11ProMax
  case iPhoneSE2
  case iPhone12
  case iPhone12Mini
  case iPhone12Pro
  case iPhone12ProMax
  case iPhone13
  case iPhone13Mini
  case iPhone13Pro
  case iPhone13ProMax
  case iPhoneSE3
  case iPhone14
  case iPhone14Plus
  case iPhone14Pro
  case iPhone14ProMax
  case iPhone15
  case iPhone15Plus
  case iPhone15Pro
  case iPhone15ProMax
  case iPad2
  case iPad3
  case iPad4
  case iPadAir
  case iPadAir2
  case iPad5
  case iPad6
  case iPadAir3
  case iPad7
  case iPad8
  case iPad9
  case iPad10
  case iPadAir4
  case iPadAir5
  case iPadMini
  case iPadMini2
  case iPadMini3
  case iPadMini4
  case iPadMini5
  case iPadMini6
  case iPadPro9Inch
  case iPadPro12Inch
  case iPadPro12Inch2
  case iPadPro10Inch
  case iPadPro11Inch
  case iPadPro12Inch3
  case iPadPro11Inch2
  case iPadPro12Inch4
  case iPadPro11Inch3
  case iPadPro12Inch5
  case iPadPro11Inch4
  case iPadPro12Inch6
  case homePod
  indirect case simulator(DeviceKit.Device)
  case unknown(Swift.String)
  public static var current: DeviceKit.Device {
    get
  }
  public static var identifier: Swift.String
  public static func mapToDevice(identifier: Swift.String) -> DeviceKit.Device
  public static func realDevice(from device: DeviceKit.Device) -> DeviceKit.Device
  public var diagonal: Swift.Double {
    get
  }
  public var screenRatio: (width: Swift.Double, height: Swift.Double) {
    get
  }
  public static var allPods: [DeviceKit.Device] {
    get
  }
  public static var allPhones: [DeviceKit.Device] {
    get
  }
  public static var allPads: [DeviceKit.Device] {
    get
  }
  @available(*, deprecated, renamed: "allDevicesWithSensorHousing")
  public static var allXSeriesDevices: [DeviceKit.Device] {
    get
  }
  public static var allPlusSizedDevices: [DeviceKit.Device] {
    get
  }
  public static var allProDevices: [DeviceKit.Device] {
    get
  }
  public static var allMiniDevices: [DeviceKit.Device] {
    get
  }
  public static var allSimulatorPods: [DeviceKit.Device] {
    get
  }
  public static var allSimulatorPhones: [DeviceKit.Device] {
    get
  }
  public static var allSimulatorPads: [DeviceKit.Device] {
    get
  }
  public static var allSimulatorMiniDevices: [DeviceKit.Device] {
    get
  }
  @available(*, deprecated, renamed: "allSimulatorDevicesWithSensorHousing")
  public static var allSimulatorXSeriesDevices: [DeviceKit.Device] {
    get
  }
  public static var allSimulatorPlusSizedDevices: [DeviceKit.Device] {
    get
  }
  public static var allSimulatorProDevices: [DeviceKit.Device] {
    get
  }
  public var isPod: Swift.Bool {
    get
  }
  public var isPhone: Swift.Bool {
    get
  }
  public var isPad: Swift.Bool {
    get
  }
  public var realDevice: DeviceKit.Device {
    get
  }
  public var isZoomed: Swift.Bool? {
    get
  }
  public static var allTouchIDCapableDevices: [DeviceKit.Device] {
    get
  }
  public static var allFaceIDCapableDevices: [DeviceKit.Device] {
    get
  }
  public static var allBiometricAuthenticationCapableDevices: [DeviceKit.Device] {
    get
  }
  public var isTouchIDCapable: Swift.Bool {
    get
  }
  public var isFaceIDCapable: Swift.Bool {
    get
  }
  public var hasBiometricSensor: Swift.Bool {
    get
  }
  public static var allDevicesWithSensorHousing: [DeviceKit.Device] {
    get
  }
  public static var allSimulatorDevicesWithSensorHousing: [DeviceKit.Device] {
    get
  }
  public var hasSensorHousing: Swift.Bool {
    get
  }
  public static var allDevicesWithRoundedDisplayCorners: [DeviceKit.Device] {
    get
  }
  public var hasRoundedDisplayCorners: Swift.Bool {
    get
  }
  public static var allDevicesWith3dTouchSupport: [DeviceKit.Device] {
    get
  }
  public var has3dTouchSupport: Swift.Bool {
    get
  }
  public static var allDevicesWithWirelessChargingSupport: [DeviceKit.Device] {
    get
  }
  public var supportsWirelessCharging: Swift.Bool {
    get
  }
  public static var allDevicesWithALidarSensor: [DeviceKit.Device] {
    get
  }
  public var hasLidarSensor: Swift.Bool {
    get
  }
  public var isCanvas: Swift.Bool? {
    get
  }
  public static var allRealDevices: [DeviceKit.Device] {
    get
  }
  public static var allSimulators: [DeviceKit.Device] {
    get
  }
  public var isSimulator: Swift.Bool {
    get
  }
  public func isOneOf(_ devices: [DeviceKit.Device]) -> Swift.Bool
  public var name: Swift.String? {
    get
  }
  public var systemName: Swift.String? {
    get
  }
  public var systemVersion: Swift.String? {
    get
  }
  public var model: Swift.String? {
    get
  }
  public var localizedModel: Swift.String? {
    get
  }
  public var ppi: Swift.Int? {
    get
  }
  public var isGuidedAccessSessionActive: Swift.Bool {
    get
  }
  public var screenBrightness: Swift.Int {
    get
  }
}
extension DeviceKit.Device : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var safeDescription: Swift.String {
    get
  }
}
extension DeviceKit.Device : Swift.Equatable {
  public static func == (lhs: DeviceKit.Device, rhs: DeviceKit.Device) -> Swift.Bool
}
@available(iOS 8.0, watchOS 4.0, *)
extension DeviceKit.Device {
  public enum BatteryState : Swift.CustomStringConvertible, Swift.Equatable {
    case full
    case charging(Swift.Int)
    case unplugged(Swift.Int)
    public var lowPowerMode: Swift.Bool {
      get
    }
    public var description: Swift.String {
      get
    }
  }
  public var batteryState: DeviceKit.Device.BatteryState? {
    get
  }
  public var batteryLevel: Swift.Int? {
    get
  }
}
@available(iOS 8.0, watchOS 4.0, *)
extension DeviceKit.Device.BatteryState : Swift.Comparable {
  public static func == (lhs: DeviceKit.Device.BatteryState, rhs: DeviceKit.Device.BatteryState) -> Swift.Bool
  public static func < (lhs: DeviceKit.Device.BatteryState, rhs: DeviceKit.Device.BatteryState) -> Swift.Bool
}
extension DeviceKit.Device {
  public enum Orientation {
    case landscape
    case portrait
    public static func == (a: DeviceKit.Device.Orientation, b: DeviceKit.Device.Orientation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var orientation: DeviceKit.Device.Orientation {
    get
  }
}
extension DeviceKit.Device {
  public static var volumeTotalCapacity: Swift.Int? {
    get
  }
  public static var volumeAvailableCapacity: Swift.Int? {
    get
  }
  @available(iOS 11.0, *)
  public static var volumeAvailableCapacityForImportantUsage: Swift.Int64? {
    get
  }
  @available(iOS 11.0, *)
  public static var volumeAvailableCapacityForOpportunisticUsage: Swift.Int64? {
    get
  }
  @available(iOS 11.0, *)
  public static var volumes: [Foundation.URLResourceKey : Swift.Int64]? {
    get
  }
}
extension DeviceKit.Device {
  public struct ApplePencilSupport : Swift.OptionSet {
    public var rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    public static let firstGeneration: DeviceKit.Device.ApplePencilSupport
    public static let secondGeneration: DeviceKit.Device.ApplePencilSupport
    public typealias ArrayLiteralElement = DeviceKit.Device.ApplePencilSupport
    public typealias Element = DeviceKit.Device.ApplePencilSupport
    public typealias RawValue = Swift.UInt
  }
  public static var allApplePencilCapableDevices: [DeviceKit.Device] {
    get
  }
  public var applePencilSupport: DeviceKit.Device.ApplePencilSupport {
    get
  }
}
extension DeviceKit.Device {
  public enum CameraType {
    @available(*, deprecated, renamed: "wide")
    case normal
    case wide
    case telephoto
    case ultraWide
    public static func == (a: DeviceKit.Device.CameraType, b: DeviceKit.Device.CameraType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var cameras: [DeviceKit.Device.CameraType] {
    get
  }
  public static var allDevicesWithCamera: [DeviceKit.Device] {
    get
  }
  @available(*, deprecated, renamed: "allDevicesWithWideCamera")
  public static var allDevicesWithNormalCamera: [DeviceKit.Device] {
    get
  }
  public static var allDevicesWithWideCamera: [DeviceKit.Device] {
    get
  }
  public static var allDevicesWithTelephotoCamera: [DeviceKit.Device] {
    get
  }
  public static var allDevicesWithUltraWideCamera: [DeviceKit.Device] {
    get
  }
  public var hasCamera: Swift.Bool {
    get
  }
  @available(*, deprecated, renamed: "hasWideCamera")
  public var hasNormalCamera: Swift.Bool {
    get
  }
  public var hasWideCamera: Swift.Bool {
    get
  }
  public var hasTelephotoCamera: Swift.Bool {
    get
  }
  public var hasUltraWideCamera: Swift.Bool {
    get
  }
}
@available(iOS 11.0, watchOS 4.0, macOS 10.10.3, tvOS 11.0, *)
extension DeviceKit.Device {
  public enum ThermalState {
    case nominal
    case fair
    case serious
    case critical
    public static func == (a: DeviceKit.Device.ThermalState, b: DeviceKit.Device.ThermalState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var thermalState: DeviceKit.Device.ThermalState? {
    get
  }
}
extension DeviceKit.Device {
  public enum CPU : Swift.Comparable {
    case a4
    case a5
    case a5X
    case a6
    case a6X
    case a7
    case a8
    case a8X
    case a9
    case a9X
    case a10Fusion
    case a10XFusion
    case a11Bionic
    case a12Bionic
    case a12XBionic
    case a12ZBionic
    case a13Bionic
    case a14Bionic
    case a15Bionic
    case a16Bionic
    case a17Pro
    case m1
    case m2
    case unknown
    public static func == (a: DeviceKit.Device.CPU, b: DeviceKit.Device.CPU) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public static func < (a: DeviceKit.Device.CPU, b: DeviceKit.Device.CPU) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public var cpu: DeviceKit.Device.CPU {
    get
  }
}
extension DeviceKit.Device.CPU : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension DeviceKit.Device.Orientation : Swift.Equatable {}
extension DeviceKit.Device.Orientation : Swift.Hashable {}
extension DeviceKit.Device.CameraType : Swift.Equatable {}
extension DeviceKit.Device.CameraType : Swift.Hashable {}
@available(iOS 11.0, watchOS 4.0, macOS 10.10.3, tvOS 11.0, *)
extension DeviceKit.Device.ThermalState : Swift.Equatable {}
@available(iOS 11.0, watchOS 4.0, macOS 10.10.3, tvOS 11.0, *)
extension DeviceKit.Device.ThermalState : Swift.Hashable {}
extension DeviceKit.Device.CPU : Swift.Hashable {}
